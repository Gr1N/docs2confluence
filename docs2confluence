#!/usr/bin/env python
# -*- coding: utf-8 -*-

import argparse
import json
import os
import sys

import requests
import sh


class PageNotFound(Exception):
    pass


class PageConflict(Exception):
    pass


class Unexpected(Exception):
    pass


class Location(object):
    CONTENT_BY_ID = '/rest/api/content/%(id)s/'


class Page(object):
    def __init__(self, id, template,
                 confluence_user=None,
                 confluence_password=None,
                 confluence_domain=None):
        self.id = id
        self.template = template
        self.confluence_user = confluence_user
        self.confluence_password = confluence_password
        self.confluence_domain = confluence_domain

    def get(self):
        location = Location.CONTENT_BY_ID % {'id': self.id}
        url = '%s%s' % (self.confluence_domain, location,)
        response = requests.get(url, auth=(
            self.confluence_user, self.confluence_password,
        ))

        status = response.status_code
        if status == requests.codes.NOT_FOUND:
            raise PageNotFound
        elif status != requests.codes.OK:
            raise Unexpected

        return response.json()

    def update(self):
        page = self.get()

        location = Location.CONTENT_BY_ID % {'id': self.id}
        url = '%s%s' % (self.confluence_domain, location,)
        data = json.dumps({
            'id': self.id,
            'type': page['type'],
            'title': page['title'],
            'space': {
                'key': page['space']['key'],
            },
            'body': {
                'storage': {
                    'value': self.template,
                    'representation': 'wiki',
                },
            },
            'version': {
                'number': page['version']['number'] + 1,
            },
        })
        headers = {
            'Content-Type': 'application/json',
        }
        response = requests.put(url, data=data, headers=headers, auth=(
            self.confluence_user, self.confluence_password,
        ))

        status = response.status_code
        if status == requests.codes.NOT_FOUND:
            raise PageNotFound
        elif status == requests.codes.CONFLICT:
            raise PageConflict
        elif status != requests.codes.OK:
            raise Unexpected

        return response.json()


class Application(object):
    def __init__(self, argv=sys.argv[1:], stdout=sys.stdout, stderr=sys.stderr):
        parser = argparse.ArgumentParser()
        parser.add_argument(
            '--confluence-user', type=str,
            default=os.environ.get('CONFLUENCE_USER'),
            help='Confluence user login'
        )
        parser.add_argument(
            '--confluence-password', type=str,
            default=os.environ.get('CONFLUENCE_PASSWORD'),
            help='Confluence user password'
        )
        parser.add_argument(
            '--confluence-domain', type=str,
            default=os.environ.get('CONFLUENCE_DOMAIN'),
            help='Confluence domain'
        )
        parser.add_argument(
            '--markdown2confluence-path', type=str,
            default='markdown2confluence',
            help='`markdown2confluence` executable path'
        )
        parser.add_argument(
            '--config', type=file, required=True,
            help='JSON formatted config file'
        )

        self.settings = parser.parse_args(argv)
        self.stdout = stdout
        self.stderr = stderr

    def run(self):
        s = self.settings
        config = json.loads(s.config.read())
        markdown2confluence = sh.Command(s.markdown2confluence_path)

        self.stdout.write('Start processing configuration file (%s)\n' % config)
        for page in config:
            page_id = page['id']
            self.stdout.write('Processing page (%s)...\n' % page_id)

            page_template = page['template']

            self.stdout.write('Converting to Confluence wiki format...\n')
            output = markdown2confluence(page_template)
            page_template = output.stdout

            self.stdout.write('Uploading to Confluence...\n')
            Page(
                page_id, page_template,
                confluence_user=s.confluence_user,
                confluence_password=s.confluence_password,
                confluence_domain=s.confluence_domain
            ).update()

        self.stdout.write('Done.\n')


if __name__ == '__main__':
    Application().run()
